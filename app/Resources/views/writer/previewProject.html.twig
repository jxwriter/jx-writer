{% extends 'base.html.twig' %}

{% block title %}{{ project.title }} / {{ scene.title }} (#{{ scene.id }}){% endblock %}

{% block bodyClass %}previewProject{% endblock %}

{% block javascripts %}
	<script>
	
	//scene en cours, avec la valeur de depart.
	var currentSceneId = {{ scene.id }};

	//preparation de jxServer
	var jxServer = new JX.Server();
	jxServer.variables.init("unevariable", 0);
	jxServer.variables.init("uneautrevariable", 0);

	//cette fonction sera appellee quand le JSON de la scene sera recu.
	var handleScene = function(jsonData){
		
		console.log("handleScene receive JSON data : ");
		console.log(jsonData);
		
		currentSceneId = jsonData.id;

		//pointe vers les elements HTML
		var titleElement = document.getElementById("mainTitle");
		var mediaElement = document.getElementById("medias");
		var connectionElement = document.getElementById("connections");
		
		//reset elements
		titleElement.innerHTML = "";
		mediaElement.innerHTML = "";
		connectionElement.innerHTML = "";
		
		//titre de la page
		titleElement.innerHTML = "Scène #" + jsonData.id ;
		titleElement.innerHTML += " : " + jsonData.title ;
		titleElement.innerHTML += " (" + jsonData.project.title + ")";
		
		jsonData.medias.forEach(function(item){
			if (item.format == "text") {
				mediaElement.innerHTML += "<p>" + item.content + "</p>";	
			} 

			//gérer tous les autres formats ici...
		});

		jsonData.connections.forEach(function(item){
			if (! item.label) {
				return;
			}
			
			var newConnectionElement = document.createElement("li");
			newConnectionElement.innerHTML = item.label;
			newConnectionElement.innerHTML += " (vers la scène #" + item.childSceneId + ")";

			newConnectionElement.addEventListener("click", function(){
				jxServer.requestScene(item.childSceneId, handleScene);
			});

			connectionElement.appendChild(newConnectionElement);
		});

	}
	
	//cette fonction sera appelle si la saisie du joueur correspond a une connection.
	var handlePatternResponse = function(jsonData){
		console.log("Check pattern : scene found !");
		handleScene(jsonData);
	}
	
	//cette fonction sera appelle si la saisie du joueur NE correspond PAS a une connection.
	var handlePatternFailure = function(message, data){
		console.log("Check pattern : no scene found.");
		//alert("Invalid pattern");
	}
	
	//gestion de la validation du formulaire
	document.querySelector("#patternForm").addEventListener("submit", function(){

		var theInput = document.querySelector("#playerInput").value;
		console.log("Form submitted with value : " + theInput);
		
		//demande au serveur la scene correspondant a la saisie (en passant les fonctions "handlePatternResponse" et "handlePatternFailure")
		jxServer.checkPattern(currentSceneId, theInput, handlePatternResponse, handlePatternFailure);	
	});

	//******
	//c'est ici que ca demarre : lance la requete pour la premiere scene.
	//si une scene est trouvee, il appelera la fonction "handleScene"
	//******
	jxServer.requestScene(currentSceneId, handleScene);
	
	</script>
{% endblock %}

{% block body %}
	<p>
		<a href="{{ path("apiGetScene", {'sceneId': scene.id}) }}">(Voir le JSON de la scène {{ scene.id }} )</a>
	</p>

	<h1 id="mainTitle"></h1>
	<div id="medias">
		
	</div>

	<ul id="connections">
		
	</ul>

	

	<p>
		<form action="#" id="patternForm">
			<input type="text" id="playerInput" />
			<input type="submit"  />
		</form>
	</p>

	
	


{% endblock %}
